<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)SharpLox.Meta\bin\Debug\SharpLox.Meta.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
// Produces a set of C# classes representing an abstract syntax tree, based on a specification file.
// Supports multiple types of abstract syntax trees. e.g. Statements and Expressions as two separate class hierarchies.
// Each distinct type of AST is represented as a base class (abstract), and then a series of specific node types (each their own inheriting class).
// The node types have fields corresponding to the information on that AST node type.  e.g. a Unary Expression has an Operator and Expression.

// The expected format of the definition file is:
/*
	AstTypeOne<>
	AstOneNodeTypeOne	: Type name, Type name2, Type name3
	AstOneNodeTypeTwo	: Type name
	AstTypeTwo
	AstTwoNodeTypeOne	: Type name
*/

// The first line is the AST type.  e.g. Expression or Statement.  The precense of <> indicates the AST's visitor methods should return a value.  Otherwise, they do not.
// Following lines (before the next AST type, if any) are each node type for that AST.
// These have a name, followed by a field list (comma separated) after a ':'.  Each field consists of a Type (.NET type) and name.  The name should be camelCase.

// The example above would produce:
/*
	using System;

	namespace SharpLox
	{
		public abstract class AstTypeOne
		{
			public class AstOneNodeTypeOne : AstTypeOne
			{
				public AstOneNodeTypeOne(
				Type name,
				Type name2,
				Type name3
				)
				{
					this.Name = name;
					this.Name2 = name2;
					this.Name3 = name3;
				}

				public Type Name { get; set; }
				public Type Name2 { get; set; }
				public Type Name3 { get; set; }
			} 
			public class AstOneNodeTypeTwo : AstTypeOne
			{
				public AstOneNodeTypeTwo(
				Type name
				)
				{
					this.Name = name;
				}

				public Type Name { get; set; }
			} 
		}

		public abstract class AstTypeTwo
		{
			public class AstTwoNodeTypeOne : AstTypeTwo
			{
				public AstTwoNodeTypeOne(
				Type name
				)
				{
					this.Name = name;
				}

				public Type Name { get; set; }
			} 
		} 
	} 
*/

// Further, this template produces a Visitor interface and the associated Accept() methods for each node type.
#>
using System;

namespace SharpLox
{
<#
	var definition = new SharpLox.Meta.AstDefinitionProvider(this.Host, @"..\AbstractSyntaxTree.txt").GetDefinition();

	foreach(var tree in definition.Trees)
	{
		// write a closing brace if this _isn't_ the first AST definition we're dealing with
		if (!tree.IsFirst)
		{
#>
	}

<#
		}
#>
	public abstract class <#=tree.Name#>
	{
		public interface Visitor<#=tree.HasVisitResult ? "<T>" : ""#>
		{
<#
		// write visitor methods for each node type.
		foreach(var type in tree.NodeTypes)
		{
#>
			<#=tree.HasVisitResult ? "T" : "void"#> Visit<#=type.Name#>(<#=type.Name#> <#=tree.NameForParameter()#>);
<#
		}
#>
		}

		public abstract <#=tree.HasVisitResult ? "T" : "void"#> Accept<#=tree.HasVisitResult ? "<T>" : ""#>(Visitor<#=tree.HasVisitResult ? "<T>" : ""#> visitor);
<#
		// write node type classes
		foreach(var type in tree.NodeTypes)
		{
#>

		public class <#=type.Name#> : <#=tree.Name#>
		{
			public <#=type.Name#>(
<#
			// write constructor parameters.
			for(var i = 0; i < type.Fields.Count; i++)
			{
				// whether a comma gets written at the end or not.
				var end = i == type.Fields.Count - 1 ? "" : ",";
#>
				<#=type.Fields[i].Value#> <#=type.Fields[i].Key.ForConstructorParameter()#><#=end#>
<#
			}
#>
			)
			{
<#
		// write property assignments from constructor arguments.
		foreach(var field in type.Fields)
			{
#>
				this.<#=field.Key.ForProperty()#> = <#=field.Key.ForConstructorParameter()#>;
<#
			}
#>
			}

<#
			// write properties.
			foreach(var field in type.Fields)
			{
#>
			public <#=field.Value#> <#=field.Key.ForProperty()#> { get; set; }
<#
			}
#>

			public override <#=tree.HasVisitResult ? "T" : "void"#> Accept<#=tree.HasVisitResult ? "<T>" : ""#>(Visitor<#=tree.HasVisitResult ? "<T>" : ""#> visitor)
			{
				<#=tree.HasVisitResult ? "return " : ""#>visitor.Visit<#=type.Name#>(this);
			}
		} <#// closing brace for node type class #>

<#
		}
	}
#>
	} <#// closing brace for abstract class #>

} <#// closing brace for namespace #>